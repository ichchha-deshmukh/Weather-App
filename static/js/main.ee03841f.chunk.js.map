{"version":3,"sources":["assets/Arrow.png","components/TemperatureConverter/slice.js","components/TemperatureConverter/index.js","components/Navigation/slice.js","components/Navigation/index.js","components/Weather/slice.js","components/BarChart/index.js","components/WeatherCards/index.js","components/Forecast/index.js","components/Loading/index.js","components/Weather/index.js","App.js","redux/store.js","index.js"],"names":["module","exports","slice","createSlice","name","initialState","currentUnit","reducers","changeTemperatureUnit","state","action","payload","actions","selectTemperatureUnit","tempConverter","TemperatureConverter","useSelector","dispatch","useDispatch","RadioGroup","value","onChange","event","target","className","FormControlLabel","control","Radio","label","activeCount","incrementCount","Math","min","decrementCount","max","selectActiveCount","navigation","useStyles","makeStyles","theme","imageButton","padding","imageButtonRight","transform","imageSrc","height","width","backgroundSize","backgroundPosition","Navigation","classes","ButtonBase","style","visibility","onClick","backgroundImage","arrow","data","setWeatherData","isDataLoaded","weatherData","showData","list","reduce","accumulator","current","length","lastDayWeathers","Date","dt_txt","toDateString","push","BarChart","chartData","chartType","options","vAxis","gridlines","color","baselineColor","gridlineColor","textPosition","legend","position","hAxis","textStyle","fontFamily","fontSize","root","paddingTop","spacing","paddingBottom","overflow","innerWrapper","transition","paper","textAlign","marginLeft","marginRight","WeatherCards","useTheme","isMobileScreen","useMediaQuery","breakpoints","down","getTemperature","useCallback","tempInFahrenheit","withUnit","temp","round","useMemo","map","w","getHourwithAMPM","main","Grid","container","wrap","CARD_WIDTH","index","key","item","Paper","elevation","Typography","component","variant","gutterBottom","toLocaleString","day","month","year","dateInput","d","Intl","DateTimeFormat","hour12","hour","minute","format","Forecast","display","justifyContent","alignItems","flexDirection","Loading","CircularProgress","Weather","isWeatherDataLoaded","useEffect","fetch","then","response","json","Container","maxWidth","App","CssBaseline","configureStore","reducer","tempConverterSlice","navigationSlice","weatherDataSlice","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.ee03841f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Arrow.3e045099.png\";","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const slice = createSlice({\r\n  name: \"tempConverter\",\r\n  initialState: {\r\n    currentUnit: \"Fahrenheit\",\r\n  },\r\n  reducers: {\r\n    changeTemperatureUnit: (state, action) => {\r\n      state.currentUnit = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { changeTemperatureUnit } = slice.actions;\r\n\r\nexport const selectTemperatureUnit = (state) => state.tempConverter.currentUnit;\r\n\r\nexport default slice.reducer;\r\n","import React from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { changeTemperatureUnit, selectTemperatureUnit } from \"./slice\";\r\nimport { RadioGroup, FormControlLabel } from \"@material-ui/core\";\r\nimport \"./style.css\";\r\n\r\nexport default function TemperatureConverter() {\r\n  const currentUnit = useSelector(selectTemperatureUnit);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <RadioGroup\r\n      name=\"temperatureUnit\"\r\n      value={currentUnit}\r\n      onChange={(event) => dispatch(changeTemperatureUnit(event.target.value))}\r\n      className=\"temperature-unit-wrapper\"\r\n    >\r\n      <FormControlLabel value=\"Celcius\" control={<Radio />} label=\"Celcius\" />\r\n      <FormControlLabel\r\n        value=\"Fahrenheit\"\r\n        control={<Radio />}\r\n        label=\"Fahrenheit\"\r\n      />\r\n    </RadioGroup>\r\n  );\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const slice = createSlice({\r\n  name: \"navigation\",\r\n  initialState: {\r\n    activeCount: 0,\r\n  },\r\n  reducers: {\r\n    incrementCount: (state) => {\r\n      state.activeCount = Math.min(state.activeCount + 1, 4);\r\n    },\r\n    decrementCount: (state) => {\r\n      state.activeCount = Math.max(state.activeCount - 1, 0);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { incrementCount, decrementCount } = slice.actions;\r\n\r\nexport const selectActiveCount = (state) => state.navigation.activeCount;\r\n\r\nexport default slice.reducer;\r\n","import React from \"react\";\r\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport arrow from \"../../assets/Arrow.png\";\r\nimport \"../Navigation/styles.css\";\r\nimport { incrementCount, decrementCount, selectActiveCount } from \"./slice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  imageButton: {\r\n    padding: \"1rem\",\r\n  },\r\n  imageButtonRight: {\r\n    transform: \"rotate(180deg)\",\r\n  },\r\n  imageSrc: {\r\n    height: \"2.5rem\",\r\n    width: \"5rem\",\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center 40%\",\r\n  },\r\n}));\r\n\r\nexport default function Navigation() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const activeCount = useSelector(selectActiveCount);\r\n\r\n  return (\r\n    <div className=\"navigation-wrapper\">\r\n      <ButtonBase\r\n        style={{ visibility: activeCount === 0 ? \"hidden\" : \"visible\" }}\r\n        className={classes.imageButton}\r\n        onClick={() => dispatch(decrementCount())}\r\n      >\r\n        <div\r\n          className={classes.imageSrc}\r\n          style={{\r\n            backgroundImage: `url(${arrow})`,\r\n          }}\r\n        />\r\n      </ButtonBase>\r\n\r\n      <ButtonBase\r\n        style={{ visibility: activeCount === 4 ? \"hidden\" : \"visible\" }}\r\n        className={`${classes.imageButton} ${classes.imageButtonRight}`}\r\n        onClick={() => dispatch(incrementCount())}\r\n      >\r\n        <div\r\n          className={classes.imageSrc}\r\n          style={{\r\n            backgroundImage: `url(${arrow})`,\r\n          }}\r\n        />\r\n      </ButtonBase>\r\n    </div>\r\n  );\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const slice = createSlice({\r\n  name: \"weatherData\",\r\n  initialState: { data: null },\r\n  reducers: {\r\n    setWeatherData: (state, action) => {\r\n      state.data = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setWeatherData } = slice.actions;\r\n\r\nexport const isDataLoaded = (state) => !!state.weatherData.data;\r\n\r\nexport const showData = (state) =>\r\n  state.weatherData?.data?.list?.reduce?.((accumulator, current) => {\r\n    if (accumulator.length > 0) {\r\n      const lastDayWeathers = accumulator[accumulator.length - 1];\r\n      const lastDay = new Date(lastDayWeathers[0].dt_txt).toDateString();\r\n      if (lastDay === new Date(current.dt_txt).toDateString()) {\r\n        lastDayWeathers.push(current);\r\n      } else {\r\n        accumulator.push([current]);\r\n      }\r\n    } else {\r\n      accumulator.push([current]);\r\n    }\r\n    return accumulator;\r\n  }, []);\r\n\r\nexport default slice.reducer;\r\n","import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nimport \"../BarChart/styles.css\";\r\n\r\nexport default function BarChart({ chartData = [] }) {\r\n  const data = [[\"Time\", \"Temperature\"], ...chartData];\r\n\r\n  const options = {\r\n    vAxis: {\r\n      gridlines: {\r\n        color: \"transparent\",\r\n      },\r\n      baselineColor: \"#fff\",\r\n      gridlineColor: \"#fff\",\r\n      textPosition: \"none\",\r\n    },\r\n    legend: { position: \"none\" },\r\n    width: \"100%\",\r\n    height: \"200px\",\r\n    hAxis: {\r\n      textStyle: {\r\n        fontFamily: \"Arial\",\r\n        fontSize: 15,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"chart-wrapper \">\r\n      <Chart chartType=\"ColumnChart\" data={data} options={options} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useMemo, useCallback } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { selectActiveCount } from \"../Navigation/slice\";\r\nimport { showData } from \"../Weather/slice\";\r\nimport { selectTemperatureUnit } from \"../TemperatureConverter/slice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport BarChart from \"../BarChart\";\r\n\r\nconst CARD_WIDTH = 184;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: theme.spacing(3),\r\n    overflow: \"hidden\",\r\n  },\r\n  innerWrapper: {\r\n    transition: \"transform 1s\",\r\n  },\r\n  paper: {\r\n    height: 200,\r\n    width: CARD_WIDTH - theme.spacing(2),\r\n    fontSize: 20,\r\n    textAlign: \"left\",\r\n    padding: theme.spacing(2),\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    transition: \"transform 1s\",\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function WeatherCards() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const isMobileScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const activeCount = useSelector(selectActiveCount);\r\n  const data = useSelector(showData);\r\n  const currentUnit = useSelector(selectTemperatureUnit);\r\n\r\n  const getTemperature = useCallback(\r\n    ({ tempInFahrenheit, withUnit = false }) => {\r\n      const temp =\r\n        currentUnit === \"Fahrenheit\"\r\n          ? Math.round(tempInFahrenheit)\r\n          : Math.round(((Math.round(tempInFahrenheit) - 32) * 5) / 9);\r\n      return withUnit\r\n        ? `${temp} ${currentUnit === \"Fahrenheit\" ? `°F` : \"°C\"}`\r\n        : temp;\r\n    },\r\n    [currentUnit]\r\n  );\r\n\r\n  const chartData = useMemo(() => {\r\n    return data[activeCount].map((w) => {\r\n      return [\r\n        getHourwithAMPM(w.dt_txt),\r\n        getTemperature({ tempInFahrenheit: w.main.temp }),\r\n      ];\r\n    });\r\n  }, [data, activeCount, getTemperature]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container className={classes.root}>\r\n        <Grid\r\n          container\r\n          wrap=\"nowrap\"\r\n          className={classes.innerWrapper}\r\n          style={{\r\n            transform: `translateX(${\r\n              activeCount * -CARD_WIDTH +\r\n              CARD_WIDTH -\r\n              (isMobileScreen ? CARD_WIDTH / 2 + theme.spacing(2) : 0)\r\n            }px)`,\r\n          }}\r\n        >\r\n          {data.slice(0, 5).map((value, index) => (\r\n            <Grid key={index} item>\r\n              <Paper\r\n                className={classes.paper}\r\n                elevation={index === activeCount ? 7 : 0}\r\n                style={{\r\n                  transform: `scale(${index === activeCount ? 1.1 : 1})`,\r\n                }}\r\n              >\r\n                <Typography component=\"h1\" variant=\"h6\" gutterBottom>\r\n                  Temp:\r\n                </Typography>\r\n                <div>\r\n                  {getTemperature({\r\n                    tempInFahrenheit: value[0].main.temp,\r\n                    withUnit: true,\r\n                  })}\r\n                </div>\r\n                <br />\r\n                <Typography component=\"h1\" variant=\"h6\" gutterBottom>\r\n                  Date:\r\n                </Typography>\r\n                <div>\r\n                  {new Date(value[0].dt_txt).toLocaleString(\"en\", {\r\n                    day: \"numeric\",\r\n                    month: \"short\",\r\n                    year: \"numeric\",\r\n                  })}\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n      <BarChart chartData={chartData} />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction getHourwithAMPM(dateInput) {\r\n  var d = new Date(dateInput);\r\n  return new Intl.DateTimeFormat(\"default\", {\r\n    hour12: true,\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n  }).format(d);\r\n}\r\n","import React from \"react\";\r\nimport Navigation from \"../Navigation\";\r\nimport WeatherCards from \"../WeatherCards\";\r\n\r\nexport default function Forecast() {\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <WeatherCards />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    height: \"100vh\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n  },\r\n}));\r\n\r\nexport default function Loading() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress />\r\n      <p>Loading...</p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport TemperatureConverter from \"../TemperatureConverter\";\r\nimport Forecast from \"../Forecast\";\r\nimport Loading from \"../Loading\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setWeatherData, isDataLoaded } from \"./slice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    height: \"100vh\",\r\n    flexDirection: \"column\",\r\n  },\r\n}));\r\n\r\nexport default function Weather() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const isWeatherDataLoaded = useSelector(isDataLoaded);\r\n  useEffect(() => {\r\n    getWeatherForecast().then((weatherData) => {\r\n      dispatch(setWeatherData(weatherData));\r\n    });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" className={classes.root}>\r\n      {isWeatherDataLoaded ? (\r\n        <>\r\n          <TemperatureConverter />\r\n          <Forecast />\r\n        </>\r\n      ) : (\r\n        <Loading />\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nfunction getWeatherForecast() {\r\n  return fetch(\r\n    `https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&units=imperial&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40`\r\n  ).then((response) => response.json());\r\n}\r\n","import React from \"react\";\r\nimport Weather from \"./components/Weather\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <CssBaseline />\r\n      <Weather />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tempConverterSlice from \"../components/TemperatureConverter/slice\";\r\nimport navigationSlice from \"../components/Navigation/slice\";\r\nimport weatherDataSlice from \"../components/Weather/slice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tempConverter: tempConverterSlice,\r\n    navigation: navigationSlice,\r\n    weatherData: weatherDataSlice,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}